--Basic expressions using string
SELECT "Hello", "World"

--Using Value
SELECT VALUE "Hello"

SELECT
 "Hello" AS word1,
 "World" AS word2

--To Array
SELECT
[
  "Hello",
  "World"
]
 AS words

--To Document
SELECT
{
  "word1": "Hello",
  "word2": "World"
}
 AS words

--Nested doucment:
SELECT
{
  "words1":
    ["Hello", "World"],
  "words2":
    ["How", "Are", "You?"]
}
 AS allWords

--Arithmetic:
SELECT  5 + 3 AS Add,
5 - 3 as Sub,
5 * 3 as Multpiles,
5 / 3 as Div,
5 % 3 as Perc

--Bitwise
SELECT  1 | 0 as OrOp,
1 & 0 as AndOp,
1 ^ 0 as XOROp,
2 << 1 as Leftshift,
2 >> 1 as Rightshift,
7 >>> 1 as zerofilrightshift

-- Logical operators

SELECT
(
  "hot" = "cold" AND
  "up" = "down" OR
  1 = 1
) AS logical1,
(
  "hot" = "cold" AND (
    "up" = "down" OR
    1 = 1
  )
) AS logical2

--Comparision with the help of IIF
select (6 > 5 ? "Higher" : "lower or equal") as Comparison

-- Coalesce operator
select (
    "First" ??
    undefined ??
    "Third"
) as Coalesce1,
(
    undefined ??
    "Second"
)as Coalesece2
     
-- String concatenation
SELECT
  "Hello" ||  "World"
    AS StringConcat


-- Math functions

SELECT
 ROUND(3.4) AS MathRound1,
 ROUND(3.5) AS MathRound2,
 CEILING(3.4) AS MathCeiling1,
 CEILING(3.5) AS MathCeiling2,
 FLOOR(3.4) AS MathFloor1,
 FLOOR(3.5) AS MathFloor2,
 ABS(-5) AS MathAbs1,
 ABS(5) AS MathAbs2,
 SIN(28) AS MathSin,
 COS(28) AS MathCos,
 TAN(28) AS MathTan,
 LOG(16) AS MathLog,
 PI() AS MathPi,
POWER(2, 3) as MathPower,
SQUARE(3) as MathSquare,
TRUNC(2.4) as MathTrunc1, 
TRUNC(2.6) as MathTrunc2


-- Type checking

SELECT
 IS_ARRAY(6) AS IsArray1,
 IS_ARRAY([6]) AS IsArray2,
 IS_BOOL(6) AS IsBool1,
 IS_BOOL(false) AS IsBool2,
 IS_NULL(6) AS IsNull1,
 IS_NULL(null) AS IsNull2,
 IS_OBJECT("hello")
  AS  IsObject1,
 IS_OBJECT({"word": "hello"}) AS IsObject2
SELECT IS_DEFINED({ "a" : 5 }.a) AS ISdefined1 , 
IS_DEFINED({ "a" : 5 }.b) AS ISdefined2,
IS_NUMBER(1),  
IS_NUMBER("value")

--IS_PRIMITIVE
--Returns a Boolean value indicating if the type of the specified expression is a primitive (string, Boolean, numeric or null).
SELECT   
           IS_PRIMITIVE(true),   
           IS_PRIMITIVE(1),  
           IS_PRIMITIVE("value"),   
           IS_PRIMITIVE(null),  
           IS_PRIMITIVE({prop: "value"}),   
           IS_PRIMITIVE([1, 2, 3]),  
           IS_PRIMITIVE({prop: "value"}.prop2) 

-- String

SELECT
 CONCAT("A", "b", "c", "d")
  AS SConcat,
 CONTAINS("Abcdef", "cde")
  AS SContains,
 STARTSWITH("Abcdef", "Ab")
  AS SStartsWith,
 ENDSWITH("Abcdef", "cdef")
  AS SEndsWith,
 INDEX_OF("Abcdef", "de")
  AS SIndexOf1,
 INDEX_OF("Abcdef", "df")
  AS SIndexOf2,
 LEFT("Abcdef", 3) AS SLeft,
 RIGHT("Abcdef", 3) AS SRight,
 SUBSTRING("Abcdef", 2, 3)
  AS SSubstring,
 LENGTH("Abcdef") AS SLength,
 LOWER("Abcdef") AS SLower,
 UPPER("Abcdef") AS SUpper


-- Array

SELECT
 ARRAY_CONCAT(
  ["A", "B"],
  ["1", "2"],
  ["#"])
    AS AConcat,
 ARRAY_CONTAINS(
  ["1A", "1B", "1C"],
  "1B")
    AS AContains,
 ARRAY_LENGTH(
  ["1A", "1B", "1C"])
    AS ALength,
 ARRAY_SLICE(
  ["1A", "1B", "1C", "1D"],
  1,
  2)
    AS ASlice